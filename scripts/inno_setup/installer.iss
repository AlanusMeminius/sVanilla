; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#define MyAppName "sVanilla"
#define NameShort "sVanilla"
;#define MyAppVersion "1.0.0"
#define MyCompanyName "sVanilla Studio"
#define MyAppPublisher "sVanilla Studio"
#define MyAppExeName "sVanilla.exe"
#define AppIcon "resources/AppIcon.ico"
#define HomeUrl "https://svanilla.app/"
#define AppMutex  "" 
;#define RootPath "D:\workfile\sVanilla/installed/bin"
;#define CurrenData "2024_11_16"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{2B30B79C-72E0-4A0D-B82D-AAD3075B2E1C}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#HomeUrl}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
PrivilegesRequired=admin
PrivilegesRequiredOverridesAllowed=commandline
OutputBaseFilename={#MyAppName}_{#CurrenData}_setup
Compression=lzma
SolidCompression=yes
AppMutex={#AppMutex}
SetupMutex={#AppMutex}setup
WizardImageFile="resources\inno-big-100.bmp,resources\inno-big-250.bmp"
WizardSmallImageFile="resources\inno-small-100.bmp,resources\inno-small-250.bmp"
SetupIconFile={#AppIcon}
UninstallDisplayIcon={app}\{#MyAppExeName}.exe
ShowLanguageDialog=true
WizardStyle=modern
;SignTool=mysigntool
SignedUninstaller=no
ArchitecturesInstallIn64BitMode=x64os
UsePreviousAppDir=no
RestartIfNeededByRun=no

[Languages]
Name: "english"; MessagesFile: "compiler:default.isl, i18n\messages.en.isl" 
Name: "simplifiedChinese"; MessagesFile: "i18n\default.zh-cn.isl,i18n\messages.zh-cn.isl"

[InstallDelete]

[UninstallDelete]
Type: filesandordirs; Name: "{app}\_"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}";

[Dirs]
;Name: "{app}"; AfterInstall: DisableAppDirInheritance

[Files]
Source: "{#RootPath}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs


[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Registry]
Root: HKCU; Subkey:"Software\{#MyAppName}\{#MyAppName}\install"; ValueType:string; ValueName:"Version"; ValueData:"{#MyAppVersion}"; Flags:uninsdeletekey
Root: HKCU; Subkey:"Software\{#MyAppName}\{#MyAppName}\install"; ValueType:string; ValueName:"VersionNumber"; ValueData:"{app}"; Flags:uninsdeletekey
Root: HKCU; Subkey:"Software\{#MyAppName}\{#MyAppName}\install"; ValueType:string; ValueName:"InstallType"; ValueData:"inno"; Flags:uninsdeletekey
Root: HKCU; Subkey:"Software\{#MyAppName}\{#MyAppName}\install"; ValueType:string; ValueName:"InstallPath"; ValueData:"{app}"; Flags:uninsdeletekey

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent


[UninstallRun]
;Filename: "{app}\{#MyAppExeName}"; Parameters: "--clean-up"; 

[Code]
function WizardNotSilent(): Boolean;
begin
  Result := not WizardSilent();
end;

function IsAppInstalled(): Boolean;
var
  InstallPath: String;
begin
  Result := False;
  if RegQueryStringValue(HKLM, 'Software\{#MyAppName}\{#MyAppName}\install', 'InstallPath', InstallPath) then
  begin
    if DirExists(InstallPath) then
      Result := True;
  end;
end;

function BoolToStr(Value: Boolean): String;
begin
  if Value then
    Result := 'true'
  else
    Result := 'false';
end;

function Max(Value1, Value2: Integer): Integer;
begin
  if Value1 > Value2 then
    Result := Value1
  else
    Result := Value2;
end;

function SplitString(const S: string; const Delimiter: string): TArrayOfString;
var
  StrList: TStringList;
  J: Integer;
begin
  StrList := TStringList.Create;
  try
    StrList.StrictDelimiter := True;
    StrList.Delimiter := Delimiter;
    StrList.DelimitedText := S;

    SetArrayLength(Result, StrList.Count);
    for J := 0 to StrList.Count - 1 do
    begin
      Result[J] := StrList[J];
    end;
  finally
    StrList.Free;
  end;
end;

function CompareVersions(const Version1, Version2: string): Integer;
var
  VersionParts1, VersionParts2: TArrayOfString;
  I, Num1, Num2, MaxParts: Integer;
begin
  Result := 0; 

  VersionParts1 := SplitString(Version1, '.');
  VersionParts2 := SplitString(Version2, '.');

  MaxParts := Max(GetArrayLength(VersionParts1), GetArrayLength(VersionParts2));

  for I := 0 to MaxParts - 1 do
  begin
    if I < GetArrayLength(VersionParts1) then
      Num1 := StrToInt(VersionParts1[I])
    else
      Num1 := 0;

    if I < GetArrayLength(VersionParts2) then
      Num2 := StrToInt(VersionParts2[I])
    else
      Num2 := 0;

    if Num1 > Num2 then
    begin
      Result := 1;  // Version1 大于 Version2
      Exit;
    end
    else if Num1 < Num2 then
    begin
      Result := -1;  // Version1 小于 Version2
      Exit;
    end;
  end;
end;
